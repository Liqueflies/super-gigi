@import 'true';
@import '../src/assets/styles/main';

@include test-module('Functions') {

  @include test('remove unit') {
    $test: remove-unit(10px);
    $expect: 10;
    @include assert-equal($test, $expect,
      'Remove unit from a value');
  }

  @include test('rem calc') {
    $rem-base: 16px;
    $test: rem-calc(48);
    $expect: 3rem;
    $test2: rem-calc(8 16 32 64);
    $expect2: 0.5rem 1rem 2rem 4rem;
    $test3: rem-calc(16, 8px);
    $expect3: 2rem;
    @include assert-equal($test, $expect,
      'Transform a px value in rem value');
    @include assert-equal($test2, $expect2,
      'Transform a list of px value in rem values');
    @include assert-equal($test3, $expect3,
      'rem-calc with different rem-base');
  }

  @include test('em calc') {
    $rem-base: 16px;
    $test: em-calc(48);
    $expect: 3em;
    $test2: em-calc(8 16 32 64);
    $expect2: 0.5em 1em 2em 4em;
    $test3: em-calc(16, 8px);
    $expect3: 2em;
    @include assert-equal($test, $expect,
      'Transform a px value in em value');
    @include assert-equal($test2, $expect2,
      'Transform a list of px value in em values');
    @include assert-equal($test3, $expect3,
      'em-calc with different rem-base');
  }

  @include test('px calc') {
    $rem-base: 16px;
    $test: px-calc(1);
    $expect: 16px;
    $test2: px-calc(0.5em 1rem 2rem 10em);
    $expect2: 8px 16px 32px 160px;
    $test3: px-calc(1, 8px);
    $expect3: 8px;
    @include assert-equal($test, $expect,
      'Transform a px value in em value');
    @include assert-equal($test2, $expect2,
      'Transform a list of px value in em values');
    @include assert-equal($test3, $expect3,
      'em-calc with different rem-base');
  }

}


@include test-module('Mixins') {

  @include test('dry-it') {

    @include assert(
      'If $use-dry: true selector with same ID must be extended' +
      'else they will not be extended, but render normally.'
    ) {
      $unique-id: unique-id();
      $use-dry: true !global;

      @include input {
        @include dry-it($unique-id) {
          display: block;
        }

        @include dry-it($unique-id) {
          display: none;
        }
      }

      @include expect {
        display: block;
      }
      //ELSE
      $use-dry: false !global;

      @include input {
        @include dry-it($unique-id) {
          display: block;
        }

        @include dry-it($unique-id) {
          display: none;
        }
      }

      @include expect {
        display: block;
        display: none;
      }
    }
  }
};

@include test-module('Grid mixins') {
  // GRID CALC
  @include test('grid-calc') {

    @include assert('With width auto, we must reset flex properties.') {

      @include input {
        @include grid-calc(width, auto);
      }

      @include expect {
        width: auto;
        flex: 1 1 0%;
      }
    }

    @include assert(
      'With a value to width, we must delete flex grow and shrink'
    ) {

      @include input {
        @include grid-calc(width, 6);
      }

      @include expect {
        width: 50%;
        flex: 0 0 auto;
      }
    }

    @include assert(
      'Test case with n of N syntax, only calculate '+
      'the grid space and set flex if width'
    ) {

      @include input {
        @include grid-calc(width, 2 of 4);
      }

      @include expect {
        width: 50%;
        flex: 0 0 auto;
      }

      @include input {
        @include grid-calc(margin-left, 1 of 4);
      }

      @include expect {
        margin-left: 25%;
      }
    }
  }
  // GRID SPACE
  @include test('grid-space') {

    @include assert('Default: width, auto') {

      @include input {
        @include grid-space();
      }

      @include expect {
        width: auto;
        flex: 1 1 0%;
      }
    }

    @include assert('width n of N') {

      @include input {
        @include grid-space(width, 1 of 10);
      }

      @include expect {
        width: 10%;
        flex: 0 0 auto;
      }
    }

    @include assert('width in query') {

      $use-dry: false !global;
      @include input {
        .pippo {
          @include grid-space($attr: (small: 2, medium: 4));
        }
      }

      @include expect {
        width: 10%;
        flex: 0 0 auto;
      }
    }

    @include assert('width in grid') {

      @include input {
        @include grid-space(width, 6);
      }

      @include expect {
        width: 50%;
        flex: 0 0 auto;
      }
    }

    @include assert('property different from width') {

      @include input {
        @include grid-space(left, 6);
      }

      @include expect {
        left: 50%;
      }

      @include input {
        @include grid-space(left, 1 of 2);
      }

      @include expect {
        left: 50%;
      }
    }

  }
};
