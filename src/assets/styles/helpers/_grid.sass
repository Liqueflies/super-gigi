// With OW-grid you have three choises of use
// You can use mixins (preferred ways)
// You can use placeholder (the dry way, less weight if you don't use gzip)
// YOu can use precompiled classes, like foundation or bootstrap.

// Settings
$row-width: rem-calc(1920) !default
$column-gutter: rem-calc(30) !default
$grid-columns: 12 !default
$use-classes: true !default
$use-placeholder: false !default
$row-name: row !default
$column-name: column !default
$grid-start: left
$grid-end: right

// DRY MIXIN!!! What is that? Is simple, we will creat now some mixin
// that will define our column. For example i want to use:
// .column-4
//   +grid-column(4 of 12)
// it will generate some css. But it will generate ths css everytime.
// Yes I may use place holder, but placeholder are too difficult to
// manage for big project. The idea is, why not generate placeholder
// on fly? We are trying to do exactly this here.
// You can read a great article here about that:
// http://alistapart.com/article/dry-ing-out-your-sass-mixins

// OUR big variable
$placeholders: ()

// Our mixin that will generate placeholder
=dry-it($id)
  @content
  $placeholder: map-get($placeholders, $id)

  @if $placeholder == null
    $unique-id: unique-id()
    $placeholder-name: $unique-id
    $placeholders: map-merge($placeholders, ($id: $unique-id)) !global
    // * is here for a libsass bug:
    // https://github.com/sass/libsass/issues/1210
    @at-root *
      %#{$unique-id}
        @content
    @extend %#{$unique-id}
  @else
    @extend %#{$placeholder}


// Grid space calculator
// take a css property and an array as args
=grid-space($property: width, $attr: 'auto')
  @if $attr == 'auto'
    #{$property}: auto

  @else if length($attr) == 1
    #{$property}: unquote((nth($attr, 1) / $grid-columns * 100) + '%')

  @else if length($attr) == 3 and nth($attr, 2) == "of"
    #{$property}: unquote((nth($attr, 1) / nth($attr, 3) * 100) + '%')

  @else
    @each $query, $value in $attr
      +media-query($query)
        @if $value == auto
          #{$property}: auto
        @else
          #{$property}: unquote(($value / $grid-columns * 100) + '%')


// Row Mixin
=grid-row($nested: false, $vertical: false)
  +dry-it("row#{$nested$vertical}")
    display: flex
    flex-wrap: wrap
    flex-grow: 1
    margin: 0 auto
    @if $vertical
      flex-direction: column
    @if $nested
      width: auto
      margin: 0 (-$column-gutter / 2)
    @else
      max-width: $row-width

// Column Mixin
=grid-column($width: 'auto', $collapse: null, $push: null, $pull: null, $query: null)
  +dry-it("clGl#{$query}")
    display: flex
    flex-grow: 1
    padding: 0 $column-gutter / 2

  @if $width != null
    @if type-of($width) == map
      +dry-it("clWd#{$width$query}")
        +grid-space(width, $width)
    @else
      +grid-space(width, $width)

  @if $push != null
    +dry-it("clPs")
      position: relative
      #{$grid-end}: auto
    @if type-of($push) == map
      +dry-it("clPs#{$push$query}")
        +grid-space($grid-start, $push)
    @else
        +grid-space($grid-start, $push)


  @if $collapse == false
    padding: 0 $column-gutter / 2


// We will generate static css classes.
// We would prefer the mixins version, but not in every project
// you can have precompilers...

// If you prefer you can use sass placeholder,
// .class
//   @extend %row
//   @extend %row%top

@if $use-classes or $use-placeholder
  @if $use-classes
    $type: "."
  @else
    $type: "%"

  // Row classes generator
  =row-generate-classes($query, $separator: "-")
    /* #{$query} Breakpoint */
    $class-prefix: str-insert($query, $type, 1)

    // row modificators
    &#{$class-prefix}#{$separator}top
      align-items: flex-start
    &#{$class-prefix}#{$separator}middle
      align-items: center
    &#{$class-prefix}#{$separator}bottom
      align-items: flex-end
    &#{$class-prefix}#{$separator}baseline
      align-items: baseline
    &#{$class-prefix}#{$separator}stretch
      align-items: stretch

    &#{$class-prefix}#{$separator}start
      justify-content: flex-start
    &#{$class-prefix}#{$separator}center
      justify-content: center
    &#{$class-prefix}#{$separator}end
      justify-content: flex-end
    &#{$class-prefix}#{$separator}around
      justify-content: space-around
    &#{$class-prefix}#{$separator}between
      justify-content: space-between

    &#{$class-prefix}#{$separator}horizontal
      flex-direction: row
    &#{$class-prefix}#{$separator}horizontal-reverse
      flex-direction: row-reverse
    &#{$class-prefix}#{$separator}vertical
      flex-direction: column
    &#{$class-prefix}#{$separator}vertical-reverse
      flex-direction: column-reverse

    &#{$class-prefix}#{$separator}single-line
      flex-flow: nowrap

  // Column classes generator
  =column-generate-classes($query)
    $class-prefix: str-insert($query, $type, 1)

    //column modificators
    &#{$class-prefix}-collapse
      padding: 0
    &#{$class-prefix}-top
      align-self: flex-start
    &#{$class-prefix}-middle
      align-self: center
    &#{$class-prefix}-bottom
      align-self: flex-end
    &#{$class-prefix}-baseline
      align-self: baseline
    &#{$class-prefix}-stretch
      align-self: stretch
    &#{$class-prefix}-auto
      width: auto
      flex: 1

    @for $i from 0 through $grid-columns
      &#{$class-prefix}-#{$i}
        +grid-column($width: ($i of $grid-columns), $query: $query)
      &#{$class-prefix}-push-#{$i}
        +grid-column($push: ($i of $grid-columns), $width: null, $query: $query)


  // ROW GENERATOR
  #{$type}#{$row-name}
    +grid-row

    #{$type}#{$row-name}
      width: auto
      margin: 0 (-$column-gutter / 2)

    +row-generate-classes("", "")

    @each $query, $breakpoint in $breakpoints
      +media-query($query)
        +row-generate-classes(#{$query})

  // COLUMN GENERATOR
  #{$type}#{$column-name}
    +grid-column
    @each $query, $breakpoint in $breakpoints
      +media-query($query)
        +column-generate-classes(#{$query})








// FOR INFO ABOUT EQJS https://github.com/Snugug/eq.js
@if $eq-grid
  // Element Query Setting String
  $eq-setting-string: ()
  @each $eq-name, $eq-value in $breakpoints
    $tmp: $eq-name
    $tmp: str-insert($tmp, #{unquote(": ")}, str-length($tmp)+1)
    $tmp: str-insert($tmp, #{remove-unit($eq-value)}, str-length($tmp)+1)
    $eq-setting-string: append($eq-setting-string, $tmp, comma)

  // The element on we'll add eqjs javascript
  .widget
    &:before
      display: none
      content: '#{inspect($eq-setting-string)}'
  html:before
    display: none
    content: '.widget, .widgets'

// sample
.column
  +grid-column(1 of 5)
.column2
  +grid-column(1 of 2)
.column3
  +grid-column((small: 12, medium: 3))
.column4
  +grid-column((small: 12, medium: 3))
.column5
  +grid-column($width: (small: 12, medium: 5), $push: (small: 2, medium: 3))
.column6
  +grid-column($width: (small: 12, medium: 3), $push: (small: 2, medium: 3))
.column7
  +grid-column(1 of 3)
.column8
  +media-query(small)
    +grid-column(1 of 2)
.column9
  +media-query(large)
    +grid-column(1 of 2)
